#!/usr/bin/env python
# cn-py 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/
from __future__ import division, print_function

import os
import subprocess
from glob import glob

import dxpy


@dxpy.entry_point('main')
def main(tumor_bams=None, normal_bams=None, cn_reference=None, baits=None,
         fasta=None, access=None, annotation=None):

    if cn_reference and any((baits, fasta, access, annotation)):
        raise dxpy.AppError("Reference profile (cn_reference) cannot be used "
                            "alongside baits, fasta, access or annotation")

    # Install R dependencies
    install_bioc()

    # Initialize and download file inputs to the local file system
    cn_reference = download_link(cn_reference)
    baits = download_link(baits)
    fasta = download_link(fasta)
    access = download_link(access)
    annotation = download_link(annotation)
    if tumor_bams is not None:
        tumor_bams = map(download_link, tumor_bams)
    if normal_bams is not None:
        normal_bams = map(download_link, normal_bams)

    # Upload file outputs from the local file system to the platform.
    # copy_ratios=$(dx upload ${sample_name}.cnr --brief)
    # copy_segments=$(dx upload ${sample_name}.cns --brief)
    # profile_img=$(dx upload ${sample_name}-scatter.pdf --brief)
    # diagram_img=$(dx upload ${sample_name}-diagram.pdf --brief)
    # gainloss_tsv=$(dx upload ${sample_name}-gainloss.tsv --brief)
    # breaks_tsv=$(dx upload ${sample_name}-breaks.tsv --brief)
    # nexus_cn=$(dx upload ${sample_name}.nexus --brief)
    # --
    # scatter = dxpy.upload_local_file("scatter")
    # diagram = dxpy.upload_local_file("diagram")
    # nexus_cn = dxpy.upload_local_file("nexus_cn")

    output = {}
    # output["copy_ratios"] = [dxpy.dxlink(item) for item in copy_ratios]
    # output["copy_segments"] = [dxpy.dxlink(item) for item in copy_segments]
    # output["gender"] = gender
    # output["gainloss"] = [dxpy.dxlink(item) for item in gainloss]
    # output["breaks"] = [dxpy.dxlink(item) for item in breaks]
    # output["scatter"] = dxpy.dxlink(scatter)
    # output["diagram"] = dxpy.dxlink(diagram)
    # output["nexus_cn"] = dxpy.dxlink(nexus_cn)

    return output


def run_cnvkit(tumor_bams, normal_bams, reference, baits, fasta, access,
               annotation):
    """Run the CNVkit pipeline."""

    # TODO
    # if cn_reference:
    #    (treat normal_bams as more tumor_bams, if given -- or hurl?)
    #     $ cnvkit.py $tumor_bams $normal_bams -r $cn_reference

    # if no normal, no tumor:
    #     (build a flat reference and return it)
    #     $ cnvkit.py batch -n -f fasta -t baits ...
    #     or
    #     $ cnvkit.py reference -f fasta -t baits
    # if normal, but no tumor:
    #     (build a pooled reference and return it)
    #     $ cnvkit.py batch -n normal_bams -f fasta -t baits ...
    # if tumor, but no normal:
    #     (build a flat reference and use it on tumors)
    #     $ cnvkit.py batch tumor_bams -n -f fasta -t baits ...
    # if tumor and normal:
    #     (build a pooled reference and use it on tumors)
    #     $ cnvkit.py batch tumor_bams -n normal_bams -f fasta -t baits ...

    print("Determining if the given reference profile is male or female")
    if shout("cnvkit.py gender", reference, "| cut -f 2").strip() == "Female":
        yflag = ""
    else:
        yflag = "-y"

    print("Running the main CNVkit pipeline")
    command = ["cnvkit.py batch"]
    if tumor_bams:
        command.extend(tumor_bams)
        command.extend(["--scatter", "--diagram"])
    if normal_bams:
        command.append("-n")
        command.extend(normal_bams)
    if reference:
        command.extend(["-r", reference])
    if baits:
        command.extend(["-t", baits, "--split", "--short-names"])
    if fasta:
        command.extend(["-f", fasta])
    if access:
        command.extend(["-g", access])
    if annotation:
        command.extend(["--annotate", annotation])
    if yflag:
        command.append("-y")
    sh(*command)

    # Collect the outputs
    all_cnr = glob("*.cnr")
    all_cns = glob("*.cns")
    sh("cnvkit.py gainloss", " ".join(all_cnr), "-s", " ".join(all_cns),
       "-m 3 -t 0.3", yflag, "-o gainloss.tsv")

    genders = []
    for acnr, acns in zip(all_cnr, all_cns):
        sample_name = acnr.split('.')[0]
        sh("cnvkit.py breaks", acnr, acns, "-m 3 -o", sample_name + "-breaks.csv")
        sh("cnvkit.py export nexus-basic", sample_name + ".cnr -o",
           sample_name + ".nexus")
        gender = shout("cnvkit.py gender", yflag, sample_name + ".cns",
                       "| cut -f 2")
        genders.append(gender)

    all_pdf = glob("*.pdf")
    # TODO - pdfunite

    sh("ls -Altr")  # dbg

    return genders, all_cnr, all_cns


# _____________________________________________________________________________

def install_bioc():
    """In R, download and install dependencies including Bioconductor."""
    r_version = shout("R --version | head -n1 | cut -d' ' -f3 | cut -d. -f1-2"
                     ).strip()
    # export R_LIBS_USER="$HOME/R/x86_64-pc-linux-gnu-library/$r_version"
    # eg. "/home/dnanexus/R/x86_64-pc-linux-gnu-library/2.14/"
    r_libs_user_dir = "/".join(os.environ["HOME"],
                               "R/x86_64-pc-linux-gnu-library",
                               r_version)
    os.environ["R_LIBS_USER"] = r_libs_user_dir
    if os.path.isdir(r_libs_user_dir):
        print("R_LIBS_USER dir exists:", r_libs_user_dir)
    else:
        print("Creating R_LIBS_USER dir:", r_libs_user_dir)
        os.mkdir(r_libs_user_dir)
    sh("Rscript -e '%s'"
       % "; ".join((
           '.libPaths(Sys.getenv("R_LIBS_USER"))',
           'source("http://bioconductor.org/biocLite.R")',
           'biocLite()',
           'biocLite("DNAcopy")',
           'install.packages("PSCBS", repos="http://cran.us.r-project.org")',
       )))


def download_link(dxlink):
    """Download a DNAnexus object reference to the original filename.

    If the object is actually None, return None.
    """
    if dxlink is not None:
        dxf = dxpy.DXFile(dxlink)
        fname = dxf.describe()['name']
        dxpy.download_dxfile(dxf.get_id(), fname)
        return fname


def sh(*command):
    """Run a shell command."""
    cmd = " ".join(map(str, command))
    print("$", cmd)
    subprocess.check_call(cmd, shell=True)
    print()


def shout(*command):
    """Run a shell command and capture standard output."""
    cmd = " ".join(map(str, command))
    print("$", cmd)
    result = subprocess.check_output(cmd, shell=True)
    print()
    return result



# _____________________________________________________________________________

dxpy.run()
